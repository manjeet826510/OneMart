{
  "name": "onemart",
  "version": "1.0.0",
  "description": "1. Introduction\r 2. Install tools\r 3. Create react app\r 4. Create git repository\r 5. List Products\r    1. create products array\r    2. add product images\r    3. render products\r    4. style products\r 6. Add routing\r    1. npm i react-router-dom\r    2. create route for home screen\r    3. create route for product screen\r 7. Create Node.JS Server\r    1. run npm init in amazona/backend folder\r    2. Update package.json set type: module to use ES6 module imports/ to use import instead of require\r    3. create server.js\r    4. npm install express\r    5. Add .js to imports\r    6. create express app\r    7. move data.js from frontend to backend\r    8. create route for /api/products\r    9. run npm start\r    10. npm install nodemon --save-dev\r    11. put \"start\": \"nodemon server.js\", in scripts in backend package.json file\r    12. run npm start\r 8. Fetch products from backend\r    1. set proxy in frontend package.json so that frontend can access backend\r    2. npm install axios in frontend\r    3. use state hook\r    4. use effect hook\r    5. use reducer hook\r 9. Manage State by Reducer Hook\r    1. define reducer\r    2. update fetch data\r    3. get state from useReducer\r 10. Add bootstrap UI Framework\r     1. npm install react-bootstrap bootstrap\r     2. update App.js\r 11. Create Product and Rating Component\r     1. create Product component with Card\r     2. create Rating component\r     3. Use Rating component in Product component\r 12. Create Product Details Screen\r     1. fetch product from backend\r     2. create 3 columns for image, info and action\r 13. Create Loading and Message Component\r     1. create loading component\r     2. use spinner component\r     3. create message component\r     4. create utils.js to define getError function\r 14. Implement Add to Cart\r     1. Create React Context\r     2. define reducer\r     3. create store provider\r     4. implement add to cart button click handler\r 15. Complete Add to Cart\r     1. check exist item in the cart\r     2. check count in stock in backend\r 16. Create Cart Screen\r     1. create 2 columns\r     2. display items list\r     3. create action column\r 17. Complete Cart Screen\r     1. click handler for inc/dec item\r     2. click handler for remove item\r     3. Storing cartItems in local storage\r     4. click handler for checkout\r     5. add to cart implement for product.js\r 18. Create Signin Screen\r     1. create signin form\r     2. add email and password\r     3. add signin button\r 19. Connect To MongoDB Database\r     1. create atlas mongodb database\r     2. install local mongodb database\r     3. npm install mongoose\r     4. connect to mongodb database\r 20. Seed Sample Data\r     1. create Product model\r     2. create seed route\r     3. create product route\r     4. use route in server.js\r     5. seed sample product\r     6. put product related routes in productRoutes\r 21. Seed Sample Users\r     1. create user model\r     2. seed sample users\r     3. install bcryptjs\r     4. add users in data.js\r     5. create user routes\r 22. Create signin backend API\r     1. create signin api in server.js and create userRoutes and install express-async-handler\r     2. npm install jsonwebtoken\r     3. define generateToken\r 23. Complete Signin Screen\r     1. handle submit action\r     2. save token in store and local storage\r     3. show user name in header\r 24. Create Shipping Screen\r     1. create form inputs\r     2. handle save shipping address\r     3. add checkout wizard bar\r 25. Create Sign Up Screen\r     1. create input forms\r     2. handle submit\r     3. create backend api\r 26. Implement Select Payment Method Screen\r     1. create input forms\r     2. handle submit\r 27. Create Place Order Screen\r     1. show shipping address, payment and items in cart\r     2. show order summary and place order button\r 28. Implement Place Order Action\r     1. handle place order action\r     2. create order create api - orderModel, orderRoutes, isAuth\r 29. Create Order Screen\r     1. create backend api for order/:id\r     2. fetch order api in frontend\r     3. show order information in 2 columns\r 30. Implemented Razor Pay Integration\r 31. Display Order History\r     1. create order screen\r     2. create order history api\r     3. use api in the frontend\r 32. Create Profile Screen\r     1. get user info from context\r     2. show user information\r     3. create user update api\r     4. update user info\r 33. Publish To Heroku\r     1. create and config node project\r     2. serve build folder in frontend folder\r     3. create heroku account\r     4. connect it to github\r     5. Create mongodb atlas database\r     6. Set database connection in heroku env variables\r     7. Commit and push",
  "main": "index.js",
  "scripts": {
    "build": "cd backend && npm install && cd ../frontend && npm install && npm run build",
    "start": "nodemon backend/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/manjeet826510/OneMart.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/manjeet826510/OneMart/issues"
  },
  "homepage": "https://github.com/manjeet826510/OneMart#readme",
  "dependencies": {
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.3"
  }
}
